# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountProfile(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.CharField(max_length=50, blank=True, null=True)
    photo = models.CharField(max_length=100, blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    user = models.OneToOneField('AccountUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_profile'


class AccountUser(models.Model):
    id = models.BigAutoField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    is_staff = models.BooleanField()
    date_joined = models.DateTimeField()
    email = models.CharField(unique=True, max_length=254)
    is_active = models.BooleanField()
    activation_code = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'account_user'


class AccountUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AccountUser, models.DO_NOTHING)
    group = models.ForeignKey('AuthGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_user_groups'
        unique_together = (('user', 'group'),)


class AccountUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AccountUser, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_user_user_permissions'
        unique_together = (('user', 'permission'),)


class AirlineCompaniesAirport(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.CharField(max_length=50)
    address = models.CharField(max_length=50)
    description = models.TextField()
    place = models.ForeignKey('AirlineCompaniesPlace', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'airline_companies_airport'


class AirlineCompaniesPlace(models.Model):
    id = models.BigAutoField(primary_key=True)
    county = models.CharField(max_length=30)
    city = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'airline_companies_place'


class AirlineCompaniesTicket(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    departure_time = models.TimeField()
    price = models.IntegerField()
    airport_departure = models.ForeignKey(AirlineCompaniesAirport, models.DO_NOTHING, blank=True, null=True)
    airport_destination = models.ForeignKey(AirlineCompaniesAirport, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'airline_companies_ticket'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthtokenToken(models.Model):
    key = models.CharField(primary_key=True, max_length=40)
    created = models.DateTimeField()
    user = models.OneToOneField(AccountUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authtoken_token'


class BlogAnswer(models.Model):
    id = models.BigAutoField(primary_key=True)
    solution = models.TextField()
    image = models.CharField(max_length=100)
    public_date = models.DateField()
    author = models.ForeignKey(AccountUser, models.DO_NOTHING)
    question = models.ForeignKey('BlogQuestion', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blog_answer'


class BlogCategory(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'blog_category'


class BlogLike(models.Model):
    id = models.BigAutoField(primary_key=True)
    like = models.BooleanField()
    answer = models.ForeignKey(BlogAnswer, models.DO_NOTHING)
    user = models.ForeignKey(AccountUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blog_like'


class BlogQuestion(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.TextField()
    problem = models.TextField()
    image = models.CharField(max_length=100)
    public_date = models.DateField()
    author = models.ForeignKey(AccountUser, models.DO_NOTHING)
    category = models.ForeignKey(BlogCategory, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blog_question'


class CitiesLightCity(models.Model):
    id = models.BigAutoField(primary_key=True)
    name_ascii = models.CharField(max_length=200)
    slug = models.CharField(max_length=50)
    geoname_id = models.IntegerField(unique=True, blank=True, null=True)
    alternate_names = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=200)
    display_name = models.CharField(max_length=200)
    search_names = models.TextField()
    latitude = models.DecimalField(max_digits=8, decimal_places=5, blank=True, null=True)
    longitude = models.DecimalField(max_digits=8, decimal_places=5, blank=True, null=True)
    region = models.ForeignKey('CitiesLightRegion', models.DO_NOTHING, blank=True, null=True)
    country = models.ForeignKey('CitiesLightCountry', models.DO_NOTHING)
    population = models.BigIntegerField(blank=True, null=True)
    feature_code = models.CharField(max_length=10, blank=True, null=True)
    timezone = models.CharField(max_length=40, blank=True, null=True)
    subregion = models.ForeignKey('CitiesLightSubregion', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cities_light_city'
        unique_together = (('region', 'subregion', 'name'), ('region', 'subregion', 'slug'),)


class CitiesLightCountry(models.Model):
    id = models.BigAutoField(primary_key=True)
    name_ascii = models.CharField(max_length=200)
    slug = models.CharField(max_length=50)
    geoname_id = models.IntegerField(unique=True, blank=True, null=True)
    alternate_names = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=200)
    code2 = models.CharField(unique=True, max_length=2, blank=True, null=True)
    code3 = models.CharField(unique=True, max_length=3, blank=True, null=True)
    continent = models.CharField(max_length=2)
    tld = models.CharField(max_length=5)
    phone = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cities_light_country'


class CitiesLightRegion(models.Model):
    id = models.BigAutoField(primary_key=True)
    name_ascii = models.CharField(max_length=200)
    slug = models.CharField(max_length=50)
    geoname_id = models.IntegerField(unique=True, blank=True, null=True)
    alternate_names = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=200)
    display_name = models.CharField(max_length=200)
    geoname_code = models.CharField(max_length=50, blank=True, null=True)
    country = models.ForeignKey(CitiesLightCountry, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'cities_light_region'
        unique_together = (('country', 'slug'), ('country', 'name'),)


class CitiesLightSubregion(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=200)
    name_ascii = models.CharField(max_length=200)
    slug = models.CharField(max_length=50)
    geoname_id = models.IntegerField(unique=True, blank=True, null=True)
    alternate_names = models.TextField(blank=True, null=True)
    display_name = models.CharField(max_length=200)
    geoname_code = models.CharField(max_length=50, blank=True, null=True)
    country = models.ForeignKey(CitiesLightCountry, models.DO_NOTHING)
    region = models.ForeignKey(CitiesLightRegion, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cities_light_subregion'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoRestPasswordresetResetpasswordtoken(models.Model):
    created_at = models.DateTimeField()
    key = models.CharField(unique=True, max_length=64)
    ip_address = models.GenericIPAddressField(blank=True, null=True)
    user_agent = models.CharField(max_length=256)
    user = models.ForeignKey(AccountUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_rest_passwordreset_resetpasswordtoken'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
